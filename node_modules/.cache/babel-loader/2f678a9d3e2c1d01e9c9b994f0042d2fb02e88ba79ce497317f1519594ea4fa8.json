{"ast":null,"code":"var _jsxFileName = \"/Users/xiaoyang/VSCodeProjects/CS5500/calc-sheet-distribution-assignment1-2023/src/App.tsx\",\n  _s = $RefreshSig$();\n/**\n * @jest-environment jsdom\n */\n\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport SpreadSheet from './Components/SpreadSheet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [documentName, setDocumentName] = useState(getDocumentNameFromWindow());\n  //const memoryUsage = process.memoryUsage();\n  useEffect(() => {\n    if (window.location.href) {\n      setDocumentName(getDocumentNameFromWindow());\n    }\n  }, [getDocumentNameFromWindow]);\n\n  // for the purposes of this demo and for the final project\n  // we will use the window location to get the document name\n  // this is not the best way to do this, but it is simple\n  // and it works for the purposes of this demo\n  function getDocumentNameFromWindow() {\n    const href = window.location.href;\n\n    // remove  the protocol \n    const protoEnd = href.indexOf('//');\n    // find the beginning of the path\n    const pathStart = href.indexOf('/', protoEnd + 2);\n    if (pathStart < 0) {\n      // there is no path\n      return '';\n    }\n    // get the first part of the path\n    const docEnd = href.indexOf('/', pathStart + 1);\n    if (docEnd < 0) {\n      // there is no other slash\n      return href.substring(pathStart + 1);\n    }\n    // there is a slash\n    return href.substring(pathStart + 1, docEnd);\n  }\n\n  //callback function to reset the current URL to have the document name\n  function resetURL(documentName) {\n    // get the current URL\n    const currentURL = window.location.href;\n    // remove anything after the last slash\n    const index = currentURL.lastIndexOf('/');\n    const newURL = currentURL.substring(0, index + 1) + documentName;\n    // set the URL\n    window.history.pushState({}, '', newURL);\n    // now reload the page\n    window.location.reload();\n  }\n  if (documentName === '') {\n    setDocumentName('test');\n    resetURL('test');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(SpreadSheet, {\n        documentName: documentName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qGhtJkYLegzbDCTNXuStIufPnrY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","SpreadSheet","jsxDEV","_jsxDEV","App","_s","documentName","setDocumentName","getDocumentNameFromWindow","window","location","href","protoEnd","indexOf","pathStart","docEnd","substring","resetURL","currentURL","index","lastIndexOf","newURL","history","pushState","reload","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/xiaoyang/VSCodeProjects/CS5500/calc-sheet-distribution-assignment1-2023/src/App.tsx"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\n\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport SpreadSheet from './Components/SpreadSheet';\n\nfunction App() {\n\n\n  const [documentName, setDocumentName] = useState(getDocumentNameFromWindow());\n  //const memoryUsage = process.memoryUsage();\n  useEffect(() => {\n    if (window.location.href) {\n      setDocumentName(getDocumentNameFromWindow());\n    }\n  }, [getDocumentNameFromWindow]);\n\n\n\n  // for the purposes of this demo and for the final project\n  // we will use the window location to get the document name\n  // this is not the best way to do this, but it is simple\n  // and it works for the purposes of this demo\n  function getDocumentNameFromWindow() {\n    const href = window.location.href;\n\n    // remove  the protocol \n    const protoEnd = href.indexOf('//');\n    // find the beginning of the path\n    const pathStart = href.indexOf('/', protoEnd + 2);\n\n    if (pathStart < 0) {\n      // there is no path\n      return '';\n    }\n    // get the first part of the path\n    const docEnd = href.indexOf('/', pathStart + 1);\n    if (docEnd < 0) {\n      // there is no other slash\n      return href.substring(pathStart + 1);\n    }\n    // there is a slash\n    return href.substring(pathStart + 1, docEnd);\n\n  }\n\n  //callback function to reset the current URL to have the document name\n  function resetURL(documentName: string) {\n    // get the current URL\n    const currentURL = window.location.href;\n    // remove anything after the last slash\n    const index = currentURL.lastIndexOf('/');\n    const newURL = currentURL.substring(0, index + 1) + documentName;\n    // set the URL\n    window.history.pushState({}, '', newURL);\n    // now reload the page\n    window.location.reload();\n  }\n\n  if (documentName === '') {\n    setDocumentName('test');\n    resetURL('test');\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SpreadSheet documentName={documentName} />\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAGb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAACS,yBAAyB,CAAC,CAAC,CAAC;EAC7E;EACAR,SAAS,CAAC,MAAM;IACd,IAAIS,MAAM,CAACC,QAAQ,CAACC,IAAI,EAAE;MACxBJ,eAAe,CAACC,yBAAyB,CAAC,CAAC,CAAC;IAC9C;EACF,CAAC,EAAE,CAACA,yBAAyB,CAAC,CAAC;;EAI/B;EACA;EACA;EACA;EACA,SAASA,yBAAyBA,CAAA,EAAG;IACnC,MAAMG,IAAI,GAAGF,MAAM,CAACC,QAAQ,CAACC,IAAI;;IAEjC;IACA,MAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAO,CAAC,IAAI,CAAC;IACnC;IACA,MAAMC,SAAS,GAAGH,IAAI,CAACE,OAAO,CAAC,GAAG,EAAED,QAAQ,GAAG,CAAC,CAAC;IAEjD,IAAIE,SAAS,GAAG,CAAC,EAAE;MACjB;MACA,OAAO,EAAE;IACX;IACA;IACA,MAAMC,MAAM,GAAGJ,IAAI,CAACE,OAAO,CAAC,GAAG,EAAEC,SAAS,GAAG,CAAC,CAAC;IAC/C,IAAIC,MAAM,GAAG,CAAC,EAAE;MACd;MACA,OAAOJ,IAAI,CAACK,SAAS,CAACF,SAAS,GAAG,CAAC,CAAC;IACtC;IACA;IACA,OAAOH,IAAI,CAACK,SAAS,CAACF,SAAS,GAAG,CAAC,EAAEC,MAAM,CAAC;EAE9C;;EAEA;EACA,SAASE,QAAQA,CAACX,YAAoB,EAAE;IACtC;IACA,MAAMY,UAAU,GAAGT,MAAM,CAACC,QAAQ,CAACC,IAAI;IACvC;IACA,MAAMQ,KAAK,GAAGD,UAAU,CAACE,WAAW,CAAC,GAAG,CAAC;IACzC,MAAMC,MAAM,GAAGH,UAAU,CAACF,SAAS,CAAC,CAAC,EAAEG,KAAK,GAAG,CAAC,CAAC,GAAGb,YAAY;IAChE;IACAG,MAAM,CAACa,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAEF,MAAM,CAAC;IACxC;IACAZ,MAAM,CAACC,QAAQ,CAACc,MAAM,CAAC,CAAC;EAC1B;EAEA,IAAIlB,YAAY,KAAK,EAAE,EAAE;IACvBC,eAAe,CAAC,MAAM,CAAC;IACvBU,QAAQ,CAAC,MAAM,CAAC;EAClB;EAEA,oBACEd,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBvB,OAAA;MAAQsB,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5BvB,OAAA,CAACF,WAAW;QAACK,YAAY,EAAEA;MAAa;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEV;AAACzB,EAAA,CAlEQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAoEZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}