{"ast":null,"code":"/** this is the class for the front end to prepare the fetch\n * requests to the server for the spreadsheet\n * \n * it is used by SpreadSheet.tsx\n * \n * It provides the following calls.\n * \n * getDocument(name: string, user: string): Promise<Document>\n */\n\nimport { ErrorMessages } from '../Engine/GlobalDefinitions';\nimport { Cell } from '../Engine/Cell';\nimport { PortsGlobal, LOCAL_SERVER_URL, RENDER_SERVER_URL } from '../ServerDataDefinitions';\nclass SpreadSheetClient {\n  constructor(documentName, userName) {\n    // get the environment variable SERVER_LOCAL \n    // if it is true then use the local server\n    // otherwise use the render server\n    this._serverPort = PortsGlobal.serverPort;\n    this._baseURL = `${LOCAL_SERVER_URL}:${this._serverPort}`;\n    this._userName = 'juancho';\n    this._documentName = 'test';\n    this._document = void 0;\n    this._server = '';\n    this._userName = userName;\n    this._documentName = documentName;\n    this.setServerSelector('localhost'); // change this to renderhost if you want to default to renderhost\n\n    this._document = this._initializeBlankDocument();\n    this._timedFetch();\n    console.log(`process.env = ${JSON.stringify(process.env)}`);\n  }\n  _initializeBlankDocument() {\n    const document = {\n      columns: 5,\n      rows: 8,\n      formula: 'holding',\n      result: 'holding',\n      currentCell: 'A1',\n      isEditing: false,\n      cells: new Map()\n    };\n    for (let row = 0; row < document.rows; row++) {\n      for (let column = 0; column < document.columns; column++) {\n        const cellName = Cell.columnRowToCell(column, row);\n        const cell = {\n          formula: [],\n          value: 0,\n          error: ErrorMessages.emptyFormula\n        };\n        document.cells.set(cellName, cell);\n      }\n    }\n    return document;\n  }\n\n  /**\n   * \n   * Every .1 seconds, fetch the document from the server\n   */\n  async _timedFetch() {\n    const url = `${this._baseURL}/documents/${this._documentName}`;\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"userName\": this._userName\n      })\n    };\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        fetch(url, options).then(response => {\n          this.getDocument(this._documentName, this._userName);\n          this._timedFetch();\n          resolve(response);\n        }).catch(error => {\n          reject(error);\n        });\n      }, 100);\n    });\n  }\n  get userName() {\n    return this._userName;\n  }\n  set userName(userName) {\n    this._userName = userName;\n  }\n  get documentName() {\n    return this._documentName;\n  }\n  set documentName(documentName) {\n    this._documentName = documentName;\n  }\n  getFormulaString() {\n    if (!this._document) {\n      return '';\n    }\n    const formula = this._document.formula;\n    if (formula) {\n      return formula;\n    }\n    return '';\n  }\n  getResultString() {\n    if (!this._document) {\n      return '';\n    }\n    const result = this._document.result;\n    if (result) {\n      return result;\n    }\n    return '';\n  }\n  _getCellValue(cellTransport) {\n    if (cellTransport.error === '') {\n      return cellTransport.value.toString();\n    } else if (cellTransport.error === ErrorMessages.emptyFormula) {\n      return '';\n    } else {\n      return cellTransport.error;\n    }\n  }\n  getSheetDisplayStringsForGUI() {\n    if (!this._document) {\n      return [];\n    }\n    const columns = this._document.columns;\n    const rows = this._document.rows;\n    const cells = this._document.cells;\n    const sheetDisplayStrings = [];\n    // create a 2d array of strings that is [row][column]\n\n    for (let row = 0; row < rows; row++) {\n      sheetDisplayStrings[row] = [];\n      for (let column = 0; column < columns; column++) {\n        const cellName = Cell.columnRowToCell(column, row);\n        const cell = cells.get(cellName);\n        if (cell) {\n          sheetDisplayStrings[row][column] = this._getCellValue(cell);\n        } else {\n          sheetDisplayStrings[row][column] = 'xxx';\n        }\n      }\n    }\n    return sheetDisplayStrings;\n  }\n  getEditStatusString() {\n    if (!this._document) {\n      return 'no document';\n    }\n    if (this._document.isEditing) {\n      return `editing: ${this._document.currentCell}`;\n    }\n    return `viewing: ${this._document.currentCell}`;\n  }\n  getWorkingCellLabel() {\n    if (!this._document) {\n      return '';\n    }\n    return this._document.currentCell;\n  }\n  getEditStatus() {\n    return this._document.isEditing;\n  }\n\n  /**\n   * ask for permission to edit a cell\n   * @param bool \n   * @returns \n   */\n  setEditStatus(isEditing) {\n    // request edit status of the current cell\n    const body = {\n      \"userName\": this._userName,\n      \"cell\": this._document.currentCell\n    };\n    let requestEditViewURL = `${this._baseURL}/document/cell/view/${this._documentName}`;\n    if (isEditing) {\n      requestEditViewURL = `${this._baseURL}/document/cell/edit/${this._documentName}`;\n    }\n    fetch(requestEditViewURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).then(response => {\n      return response.json();\n    }).then(document => {\n      this._updateDocument(document);\n    });\n  }\n  addToken(token) {\n    const body = {\n      \"userName\": this._userName,\n      \"token\": token\n    };\n    const requestAddTokenURL = `${this._baseURL}/document/addtoken/${this._documentName}`;\n    fetch(requestAddTokenURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).then(response => {\n      return response.json();\n    }).then(document => {\n      this._updateDocument(document);\n    });\n  }\n  addCell(cell) {\n    const requestAddCellURL = `${this._baseURL}/document/addcell/${this._documentName}`;\n    const body = {\n      \"userName\": this._userName,\n      \"cell\": cell\n    };\n    fetch(requestAddCellURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).then(response => {\n      return response.json();\n    }).then(document => {\n      this._updateDocument(document);\n    });\n  }\n  removeToken() {\n    const requestRemoveTokenURL = `${this._baseURL}/document/removetoken/${this._documentName}`;\n    fetch(requestRemoveTokenURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"userName\": this._userName\n      })\n    }).then(response => {\n      return response.json();\n    }).then(document => {\n      this._updateDocument(document);\n    });\n  }\n  requestViewByLabel(label) {\n    const requestViewURL = `${this._baseURL}/document/cell/view/${this._documentName}`;\n    console.log(this._userName);\n    const body = {\n      \"userName\": this._userName,\n      \"cell\": label\n    };\n    fetch(requestViewURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).then(response => {\n      return response.json();\n    }).then(document => {\n      this._updateDocument(document);\n    });\n  }\n  clearFormula() {\n    const requestClearFormulaURL = `${this._baseURL}/document/clear/formula/${this._documentName}`;\n    fetch(requestClearFormulaURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"userName\": this._userName\n      })\n    }).then(response => {\n      return response.json();\n    }).then(document => {\n      this._updateDocument(document);\n    });\n  }\n\n  /**\n   * get the document from the server\n   * \n   * @param name the name of the document\n   * @param user the user name\n   * \n   * this is client side so we use fetch\n   */\n  getDocument(name, user) {\n    // put the user name in the body\n    const userName = user;\n    const fetchURL = `${this._baseURL}/documents/${name}`;\n    fetch(fetchURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"userName\": userName\n      })\n    }).then(response => {\n      return response.json();\n    }).then(document => {\n      this._updateDocument(document);\n    });\n  }\n  _updateDocument(document) {\n    const formula = document.formula;\n    const result = document.result;\n    const currentCell = document.currentCell;\n    const columns = document.columns;\n    const rows = document.rows;\n    const isEditing = document.isEditing;\n\n    // create the document\n    this._document = {\n      formula: formula,\n      result: result,\n      currentCell: currentCell,\n      columns: columns,\n      rows: rows,\n      isEditing: isEditing,\n      cells: new Map()\n    };\n    // create the cells\n    const cells = document.cells;\n    for (let cellName in cells) {\n      let cellTransport = cells[cellName];\n      const [column, row] = Cell.cellToColumnRow(cellName);\n      const cell = {\n        formula: cellTransport.formula,\n        value: cellTransport.value,\n        error: cellTransport.error\n      };\n      this._document.cells.set(cellName, cell);\n    }\n  }\n\n  /**\n   * Server selector for the fetch\n   */\n  setServerSelector(server) {\n    if (server === this._server) {\n      return;\n    }\n    if (server === 'localhost') {\n      this._baseURL = `${LOCAL_SERVER_URL}:${this._serverPort}`;\n    } else {\n      this._baseURL = RENDER_SERVER_URL;\n    }\n    this.getDocument(this._documentName, this._userName);\n    this._server = server;\n  }\n}\nexport default SpreadSheetClient;","map":{"version":3,"names":["ErrorMessages","Cell","PortsGlobal","LOCAL_SERVER_URL","RENDER_SERVER_URL","SpreadSheetClient","constructor","documentName","userName","_serverPort","serverPort","_baseURL","_userName","_documentName","_document","_server","setServerSelector","_initializeBlankDocument","_timedFetch","console","log","JSON","stringify","process","env","document","columns","rows","formula","result","currentCell","isEditing","cells","Map","row","column","cellName","columnRowToCell","cell","value","error","emptyFormula","set","url","options","method","headers","body","Promise","resolve","reject","setTimeout","fetch","then","response","getDocument","catch","getFormulaString","getResultString","_getCellValue","cellTransport","toString","getSheetDisplayStringsForGUI","sheetDisplayStrings","get","getEditStatusString","getWorkingCellLabel","getEditStatus","setEditStatus","requestEditViewURL","json","_updateDocument","addToken","token","requestAddTokenURL","addCell","requestAddCellURL","removeToken","requestRemoveTokenURL","requestViewByLabel","label","requestViewURL","clearFormula","requestClearFormulaURL","name","user","fetchURL","cellToColumnRow","server"],"sources":["/Users/xiaoyang/VSCodeProjects/CS5500/calc-sheet-distribution-assignment1-2023/src/Engine/SpreadSheetClient.ts"],"sourcesContent":["/** this is the class for the front end to prepare the fetch\n * requests to the server for the spreadsheet\n * \n * it is used by SpreadSheet.tsx\n * \n * It provides the following calls.\n * \n * getDocument(name: string, user: string): Promise<Document>\n */\n\nimport { DocumentTransport, CellTransport, CellTransportMap, ErrorMessages } from '../Engine/GlobalDefinitions';\nimport { Cell } from '../Engine/Cell';\n\nimport { PortsGlobal, LOCAL_SERVER_URL, RENDER_SERVER_URL } from '../ServerDataDefinitions';\n\n\n\nclass SpreadSheetClient {\n\n    // get the environment variable SERVER_LOCAL \n    // if it is true then use the local server\n    // otherwise use the render server\n\n\n\n    private _serverPort: number = PortsGlobal.serverPort;\n    private _baseURL: string = `${LOCAL_SERVER_URL}:${this._serverPort}`;\n    private _userName: string = 'juancho';\n    private _documentName: string = 'test';\n    private _document: DocumentTransport;\n    private _server: string = '';\n\n    constructor(documentName: string, userName: string) {\n        this._userName = userName;\n        this._documentName = documentName;\n\n        this.setServerSelector('localhost');  // change this to renderhost if you want to default to renderhost\n\n        this._document = this._initializeBlankDocument();\n        this._timedFetch();\n\n        console.log(`process.env = ${JSON.stringify(process.env)}`);\n\n    }\n\n    private _initializeBlankDocument(): DocumentTransport {\n        const document: DocumentTransport = {\n            columns: 5,\n            rows: 8,\n            formula: 'holding',\n            result: 'holding',\n            currentCell: 'A1',\n            isEditing: false,\n            cells: new Map<string, CellTransport>(),\n        };\n        for (let row = 0; row < document.rows; row++) {\n            for (let column = 0; column < document.columns; column++) {\n                const cellName = Cell.columnRowToCell(column, row);\n                const cell: CellTransport = {\n                    formula: [],\n                    value: 0,\n                    error: ErrorMessages.emptyFormula,\n                };\n                document.cells.set(cellName, cell);\n            }\n        }\n        return document;\n    }\n\n\n    /**\n     * \n     * Every .1 seconds, fetch the document from the server\n     */\n    private async _timedFetch(): Promise<Response> {\n        const url = `${this._baseURL}/documents/${this._documentName}`;\n        const options = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ \"userName\": this._userName })\n        };\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                fetch(url, options)\n                    .then(response => {\n                        this.getDocument(this._documentName, this._userName);\n                        this._timedFetch();\n                        resolve(response);\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            }, 100);\n        });\n    }\n\n    public get userName(): string {\n        return this._userName;\n    }\n\n    public set userName(userName: string) {\n        this._userName = userName;\n    }\n\n    public get documentName(): string {\n        return this._documentName;\n    }\n\n    public set documentName(documentName: string) {\n        this._documentName = documentName;\n    }\n\n    public getFormulaString(): string {\n        if (!this._document) {\n            return '';\n        }\n        const formula = this._document.formula;\n        if (formula) {\n            return formula\n        }\n        return '';\n    }\n\n    public getResultString(): string {\n        if (!this._document) {\n            return '';\n        }\n\n        const result = this._document.result;\n        if (result) {\n            return result;\n        }\n        return '';\n    }\n\n    private _getCellValue(cellTransport: CellTransport): string {\n        if (cellTransport.error === '') {\n            return cellTransport.value.toString();\n        } else if (cellTransport.error === ErrorMessages.emptyFormula) {\n            return '';\n        } else {\n            return cellTransport.error;\n        }\n    }\n    public getSheetDisplayStringsForGUI(): string[][] {\n        if (!this._document) {\n            return [];\n        }\n        const columns = this._document.columns;\n        const rows = this._document.rows;\n        const cells: Map<string, CellTransport> = this._document.cells as Map<string, CellTransport>;\n        const sheetDisplayStrings: string[][] = [];\n        // create a 2d array of strings that is [row][column]\n\n\n\n        for (let row = 0; row < rows; row++) {\n            sheetDisplayStrings[row] = [];\n            for (let column = 0; column < columns; column++) {\n                const cellName = Cell.columnRowToCell(column, row)!;\n                const cell = cells.get(cellName) as CellTransport;\n                if (cell) {\n                    sheetDisplayStrings[row][column] = this._getCellValue(cell);\n                } else {\n                    sheetDisplayStrings[row][column] = 'xxx';\n                }\n            }\n        }\n        return sheetDisplayStrings;\n    }\n\n    public getEditStatusString(): string {\n        if (!this._document) {\n            return 'no document';\n        }\n        if (this._document.isEditing) {\n            return `editing: ${this._document.currentCell}`;\n        }\n        return `viewing: ${this._document.currentCell}`;\n    }\n\n    public getWorkingCellLabel(): string {\n        if (!this._document) {\n            return '';\n        }\n        return this._document.currentCell;\n    }\n\n    public getEditStatus(): boolean {\n        return this._document.isEditing;\n    }\n\n    /**\n     * ask for permission to edit a cell\n     * @param bool \n     * @returns \n     */\n    public setEditStatus(isEditing: boolean): void {\n\n        // request edit status of the current cell\n        const body = {\n            \"userName\": this._userName,\n            \"cell\": this._document.currentCell\n        };\n        let requestEditViewURL = `${this._baseURL}/document/cell/view/${this._documentName}`;\n        if (isEditing) {\n            requestEditViewURL = `${this._baseURL}/document/cell/edit/${this._documentName}`;\n        }\n\n        fetch(requestEditViewURL, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                return response.json() as Promise<DocumentTransport>;\n            }).then((document: DocumentTransport) => {\n                this._updateDocument(document);\n            });\n    }\n\n\n\n    public addToken(token: string): void {\n\n        const body = {\n            \"userName\": this._userName,\n            \"token\": token\n        };\n\n        const requestAddTokenURL = `${this._baseURL}/document/addtoken/${this._documentName}`;\n        fetch(requestAddTokenURL, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n\n                return response.json() as Promise<DocumentTransport>;\n            }\n            ).then((document: DocumentTransport) => {\n                this._updateDocument(document);\n            });\n    }\n\n    public addCell(cell: string): void {\n        const requestAddCellURL = `${this._baseURL}/document/addcell/${this._documentName}`;\n\n        const body = {\n            \"userName\": this._userName,\n            \"cell\": cell\n        };\n\n        fetch(requestAddCellURL, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                return response.json() as Promise<DocumentTransport>;\n            }\n            ).then((document: DocumentTransport) => {\n                this._updateDocument(document);\n            });\n\n    }\n\n    public removeToken(): void {\n        const requestRemoveTokenURL = `${this._baseURL}/document/removetoken/${this._documentName}`;\n        fetch(requestRemoveTokenURL, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ \"userName\": this._userName })\n        })\n            .then(response => {\n                return response.json() as Promise<DocumentTransport>;\n            }\n            ).then((document: DocumentTransport) => {\n                this._updateDocument(document);\n            });\n    }\n\n    public requestViewByLabel(label: string): void {\n        const requestViewURL = `${this._baseURL}/document/cell/view/${this._documentName}`;\n        console.log(this._userName);\n        const body = {\n            \"userName\": this._userName,\n            \"cell\": label\n        };\n        fetch(requestViewURL, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                return response.json() as Promise<DocumentTransport>;\n            }).then((document: DocumentTransport) => {\n                this._updateDocument(document);\n            });\n    }\n\n    public clearFormula(): void {\n        const requestClearFormulaURL = `${this._baseURL}/document/clear/formula/${this._documentName}`;\n        fetch(requestClearFormulaURL, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ \"userName\": this._userName })\n        })\n            .then(response => {\n                return response.json() as Promise<DocumentTransport>;\n            }).then((document: DocumentTransport) => {\n                this._updateDocument(document);\n            });\n    }\n\n\n\n    /**\n     * get the document from the server\n     * \n     * @param name the name of the document\n     * @param user the user name\n     * \n     * this is client side so we use fetch\n     */\n    public getDocument(name: string, user: string) {\n        // put the user name in the body\n        const userName = user;\n        const fetchURL = `${this._baseURL}/documents/${name}`;\n        fetch(fetchURL, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ \"userName\": userName })\n        })\n            .then(response => {\n                return response.json() as Promise<DocumentTransport>;\n            }).then((document: DocumentTransport) => {\n                this._updateDocument(document);\n\n            });\n\n    }\n\n\n    private _updateDocument(document: DocumentTransport): void {\n        const formula = document.formula;\n        const result = document.result;\n        const currentCell = document.currentCell;\n        const columns = document.columns;\n        const rows = document.rows;\n        const isEditing = document.isEditing;\n\n\n\n        // create the document\n        this._document = {\n            formula: formula,\n            result: result,\n\n            currentCell: currentCell,\n            columns: columns,\n            rows: rows,\n            isEditing: isEditing,\n            cells: new Map<string, CellTransport>(),\n        };\n        // create the cells\n        const cells = document.cells as unknown as CellTransportMap;\n\n        for (let cellName in cells) {\n\n            let cellTransport = cells[cellName];\n            const [column, row] = Cell.cellToColumnRow(cellName);\n            const cell: CellTransport = {\n                formula: cellTransport.formula,\n                value: cellTransport.value,\n                error: cellTransport.error,\n            };\n            this._document!.cells.set(cellName, cell);\n        }\n\n    }\n\n    /**\n     * Server selector for the fetch\n     */\n    setServerSelector(server: string): void {\n        if (server === this._server) {\n            return;\n        }\n        if (server === 'localhost') {\n            this._baseURL = `${LOCAL_SERVER_URL}:${this._serverPort}`;\n        } else {\n            this._baseURL = RENDER_SERVER_URL;\n        }\n\n        this.getDocument(this._documentName, this._userName);\n        this._server = server;\n\n    }\n}\n\n\nexport default SpreadSheetClient;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}